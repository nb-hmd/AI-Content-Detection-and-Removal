import React, { useState } from 'react';
import { Brain, Upload, FileText, AlertCircle, CheckCircle } from 'lucide-react';

interface AnalysisResult {
  prediction: 'human' | 'ai';
  confidence: number;
  word_count: number;
}

const Analyze: React.FC = () => {
  const [text, setText] = useState('');
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [result, setResult] = useState<AnalysisResult | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    if (file.type !== 'text/plain' && !file.name.endsWith('.txt')) {
      alert('Please upload a .txt file');
      return;
    }

    if (file.size > 1024 * 1024) {
      alert('File size must be less than 1MB');
      return;
    }

    const reader = new FileReader();
    reader.onload = (e) => {
      const content = e.target?.result as string;
      setText(content);
      alert('File uploaded successfully');
    };
    reader.onerror = () => {
      alert('Error reading file');
    };
    reader.readAsText(file);
  };

  const analyzeText = async () => {
    if (!text.trim()) {
      alert('Please enter some text to analyze');
      return;
    }

    if (text.length < 50) {
      alert('Text must be at least 50 characters long for accurate analysis');
      return;
    }

    setIsAnalyzing(true);
    setError(null);
    setResult(null);

    try {
      const response = await fetch('/api/analyze', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ text }),
      });

      if (!response.ok) {
        throw new Error(`Analysis failed: ${response.statusText}`);
      }

      const data = await response.json();
      setResult(data);
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Analysis failed';
      setError(errorMessage);
    } finally {
      setIsAnalyzing(false);
    }
  };

  const clearAnalysis = () => {
    setText('');
    setResult(null);
    setError(null);
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-6xl mx-auto px-4">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-4">
            Text Analysis Tool
          </h1>
          <p className="text-lg text-gray-600 max-w-2xl mx-auto">
            Enter text below to analyze whether it was written by a human or generated by AI. 
            This tool uses a Naive Bayes machine learning model.
          </p>
        </div>

        <div className="grid lg:grid-cols-2 gap-8">
          {/* Input Section */}
          <div className="bg-white rounded-lg shadow-sm p-6">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-xl font-semibold text-gray-900 flex items-center">
                <FileText className="w-5 h-5 mr-2 text-blue-600" />
                Enter Text
              </h2>
              <div className="flex items-center space-x-2">
                <label className="bg-gray-100 text-gray-700 px-3 py-2 rounded-lg hover:bg-gray-200 transition-colors cursor-pointer text-sm">
                  <Upload className="w-4 h-4 mr-2 inline" />
                  Upload .txt
                  <input
                    type="file"
                    accept=".txt"
                    onChange={handleFileUpload}
                    className="hidden"
                  />
                </label>
                {text && (
                  <button
                    onClick={clearAnalysis}
                    className="bg-gray-100 text-gray-700 px-3 py-2 rounded-lg hover:bg-gray-200 transition-colors text-sm"
                  >
                    Clear
                  </button>
                )}
              </div>
            </div>

            <div className="space-y-4">
              <textarea
                value={text}
                onChange={(e) => setText(e.target.value)}
                placeholder="Paste your text here or upload a .txt file...\n\nMinimum 50 characters required for analysis."
                className="w-full h-64 p-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none text-sm"
              />
              
              <div className="flex items-center justify-between text-sm text-gray-500">
                <span>
                  {text.length} characters | {text.split(/\s+/).filter(word => word.length > 0).length} words
                </span>
                <span className={text.length >= 50 ? 'text-green-600' : 'text-red-600'}>
                  {text.length >= 50 ? 'Ready for analysis' : `${50 - text.length} more characters needed`}
                </span>
              </div>

              <button
                onClick={analyzeText}
                disabled={isAnalyzing || text.length < 50}
                className={`w-full bg-blue-600 text-white px-4 py-3 rounded-lg hover:bg-blue-700 transition-colors ${
                  (isAnalyzing || text.length < 50) && 'opacity-50 cursor-not-allowed'
                }`}
              >
                {isAnalyzing ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2 inline-block"></div>
                    Analyzing...
                  </>
                ) : (
                  <>
                    <Brain className="w-4 h-4 mr-2 inline" />
                    Analyze Text
                  </>
                )}
              </button>
            </div>
          </div>

          {/* Results Section */}
          <div className="bg-white rounded-lg shadow-sm p-6">
            <h2 className="text-xl font-semibold text-gray-900 mb-6 flex items-center">
              <Brain className="w-5 h-5 mr-2 text-blue-600" />
              Results
            </h2>

            {error && (
              <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
                <div className="flex items-center">
                  <AlertCircle className="w-5 h-5 text-red-600 mr-2" />
                  <span className="text-red-800 font-medium">Analysis Error</span>
                </div>
                <p className="text-red-700 mt-1">{error}</p>
              </div>
            )}

            {result ? (
              <div className="space-y-6">
                {/* Main Result */}
                <div className="text-center p-6 bg-gray-50 rounded-lg">
                  <div className={`inline-flex items-center px-4 py-2 rounded-full text-lg font-semibold mb-4 ${
                    result.prediction === 'human'
                      ? 'bg-green-100 text-green-800'
                      : 'bg-red-100 text-red-800'
                  }`}>
                    {result.prediction === 'human' ? (
                      <CheckCircle className="w-5 h-5 mr-2" />
                    ) : (
                      <Brain className="w-5 h-5 mr-2" />
                    )}
                    {result.prediction === 'human' ? 'Human Written' : 'AI Generated'}
                  </div>
                  <div className="text-3xl font-bold text-gray-900 mb-2">
                    {(result.confidence * 100).toFixed(1)}%
                  </div>
                  <div className="text-sm font-medium text-gray-600">
                    Model Confidence
                  </div>
                </div>

                {/* Simple Statistics */}
                <div className="bg-gray-50 rounded-lg p-4">
                  <h3 className="font-semibold text-gray-900 mb-3">Text Statistics</h3>
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-gray-600">Word Count</span>
                    <span className="font-medium">{result.word_count}</span>
                  </div>
                </div>
              </div>
            ) : (
              <div className="text-center py-12">
                <Brain className="w-16 h-16 text-gray-300 mx-auto mb-4" />
                <p className="text-gray-500">
                  Enter text and click "Analyze Text" to see detailed results
                </p>
              </div>
            )}
          </div>
        </div>

        {/* How it Works */}
        <div className="bg-white rounded-lg p-6 shadow-sm mt-8">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">How It Works</h3>
          <div className="grid md:grid-cols-2 gap-6 text-sm text-gray-600">
            <div>
              <h4 className="font-medium text-gray-900 mb-2">1. Text Processing</h4>
              <p>The text is converted into numerical features using Count Vectorization, which counts word frequencies.</p>
            </div>
            <div>
              <h4 className="font-medium text-gray-900 mb-2">2. Classification</h4>
              <p>A Naive Bayes classifier analyzes the features to predict if the text is human or AI-generated.</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Analyze;